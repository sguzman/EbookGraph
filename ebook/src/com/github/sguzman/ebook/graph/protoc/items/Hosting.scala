// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.sguzman.ebook.graph.protoc.items

@SerialVersionUID(0L)
final case class Hosting(
    topTitle: _root_.scala.Predef.String = "",
    fileType: _root_.scala.Predef.String = "",
    title: _root_.scala.Predef.String = "",
    author: _root_.scala.Predef.String = "",
    creator: _root_.scala.Predef.String = "",
    producer: _root_.scala.Predef.String = "",
    creationDate: _root_.scala.Predef.String = "",
    modDate: _root_.scala.Predef.String = "",
    pages: _root_.scala.Int = 0,
    encrypted: _root_.scala.Boolean = false,
    dim: scala.Option[com.github.sguzman.ebook.graph.protoc.items.PageDimension] = None,
    size: _root_.scala.Int = 0,
    md5: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Hosting] with scalapb.lenses.Updatable[Hosting] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (topTitle != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, topTitle) }
      if (fileType != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, fileType) }
      if (title != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, title) }
      if (author != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, author) }
      if (creator != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, creator) }
      if (producer != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, producer) }
      if (creationDate != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, creationDate) }
      if (modDate != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, modDate) }
      if (pages != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(9, pages) }
      if (encrypted != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, encrypted) }
      if (dim.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(dim.get.serializedSize) + dim.get.serializedSize }
      if (size != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(12, size) }
      if (md5 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, md5) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = topTitle
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = fileType
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = title
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = author
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = creator
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = producer
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = creationDate
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = modDate
        if (__v != "") {
          _output__.writeString(8, __v)
        }
      };
      {
        val __v = pages
        if (__v != 0) {
          _output__.writeUInt32(9, __v)
        }
      };
      {
        val __v = encrypted
        if (__v != false) {
          _output__.writeBool(10, __v)
        }
      };
      dim.foreach { __v =>
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = size
        if (__v != 0) {
          _output__.writeUInt32(12, __v)
        }
      };
      {
        val __v = md5
        if (__v != "") {
          _output__.writeString(13, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.sguzman.ebook.graph.protoc.items.Hosting = {
      var __topTitle = this.topTitle
      var __fileType = this.fileType
      var __title = this.title
      var __author = this.author
      var __creator = this.creator
      var __producer = this.producer
      var __creationDate = this.creationDate
      var __modDate = this.modDate
      var __pages = this.pages
      var __encrypted = this.encrypted
      var __dim = this.dim
      var __size = this.size
      var __md5 = this.md5
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __topTitle = _input__.readString()
          case 18 =>
            __fileType = _input__.readString()
          case 26 =>
            __title = _input__.readString()
          case 34 =>
            __author = _input__.readString()
          case 42 =>
            __creator = _input__.readString()
          case 50 =>
            __producer = _input__.readString()
          case 58 =>
            __creationDate = _input__.readString()
          case 66 =>
            __modDate = _input__.readString()
          case 72 =>
            __pages = _input__.readUInt32()
          case 80 =>
            __encrypted = _input__.readBool()
          case 90 =>
            __dim = Option(_root_.scalapb.LiteParser.readMessage(_input__, __dim.getOrElse(com.github.sguzman.ebook.graph.protoc.items.PageDimension.defaultInstance)))
          case 96 =>
            __size = _input__.readUInt32()
          case 106 =>
            __md5 = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.github.sguzman.ebook.graph.protoc.items.Hosting(
          topTitle = __topTitle,
          fileType = __fileType,
          title = __title,
          author = __author,
          creator = __creator,
          producer = __producer,
          creationDate = __creationDate,
          modDate = __modDate,
          pages = __pages,
          encrypted = __encrypted,
          dim = __dim,
          size = __size,
          md5 = __md5
      )
    }
    def withTopTitle(__v: _root_.scala.Predef.String): Hosting = copy(topTitle = __v)
    def withFileType(__v: _root_.scala.Predef.String): Hosting = copy(fileType = __v)
    def withTitle(__v: _root_.scala.Predef.String): Hosting = copy(title = __v)
    def withAuthor(__v: _root_.scala.Predef.String): Hosting = copy(author = __v)
    def withCreator(__v: _root_.scala.Predef.String): Hosting = copy(creator = __v)
    def withProducer(__v: _root_.scala.Predef.String): Hosting = copy(producer = __v)
    def withCreationDate(__v: _root_.scala.Predef.String): Hosting = copy(creationDate = __v)
    def withModDate(__v: _root_.scala.Predef.String): Hosting = copy(modDate = __v)
    def withPages(__v: _root_.scala.Int): Hosting = copy(pages = __v)
    def withEncrypted(__v: _root_.scala.Boolean): Hosting = copy(encrypted = __v)
    def getDim: com.github.sguzman.ebook.graph.protoc.items.PageDimension = dim.getOrElse(com.github.sguzman.ebook.graph.protoc.items.PageDimension.defaultInstance)
    def clearDim: Hosting = copy(dim = None)
    def withDim(__v: com.github.sguzman.ebook.graph.protoc.items.PageDimension): Hosting = copy(dim = Option(__v))
    def withSize(__v: _root_.scala.Int): Hosting = copy(size = __v)
    def withMd5(__v: _root_.scala.Predef.String): Hosting = copy(md5 = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = topTitle
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = fileType
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = title
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = author
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = creator
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = producer
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = creationDate
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = modDate
          if (__t != "") __t else null
        }
        case 9 => {
          val __t = pages
          if (__t != 0) __t else null
        }
        case 10 => {
          val __t = encrypted
          if (__t != false) __t else null
        }
        case 11 => dim.orNull
        case 12 => {
          val __t = size
          if (__t != 0) __t else null
        }
        case 13 => {
          val __t = md5
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(topTitle)
        case 2 => _root_.scalapb.descriptors.PString(fileType)
        case 3 => _root_.scalapb.descriptors.PString(title)
        case 4 => _root_.scalapb.descriptors.PString(author)
        case 5 => _root_.scalapb.descriptors.PString(creator)
        case 6 => _root_.scalapb.descriptors.PString(producer)
        case 7 => _root_.scalapb.descriptors.PString(creationDate)
        case 8 => _root_.scalapb.descriptors.PString(modDate)
        case 9 => _root_.scalapb.descriptors.PInt(pages)
        case 10 => _root_.scalapb.descriptors.PBoolean(encrypted)
        case 11 => dim.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => _root_.scalapb.descriptors.PInt(size)
        case 13 => _root_.scalapb.descriptors.PString(md5)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.sguzman.ebook.graph.protoc.items.Hosting
}

object Hosting extends scalapb.GeneratedMessageCompanion[com.github.sguzman.ebook.graph.protoc.items.Hosting] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.sguzman.ebook.graph.protoc.items.Hosting] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.github.sguzman.ebook.graph.protoc.items.Hosting = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.sguzman.ebook.graph.protoc.items.Hosting(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(7), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(8), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(9), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[com.github.sguzman.ebook.graph.protoc.items.PageDimension]],
      __fieldsMap.getOrElse(__fields.get(11), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(12), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.sguzman.ebook.graph.protoc.items.Hosting] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.sguzman.ebook.graph.protoc.items.Hosting(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[com.github.sguzman.ebook.graph.protoc.items.PageDimension]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ItemsProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ItemsProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 11 => __out = com.github.sguzman.ebook.graph.protoc.items.PageDimension
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.sguzman.ebook.graph.protoc.items.Hosting(
  )
  implicit class HostingLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.Hosting]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.Hosting](_l) {
    def topTitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.topTitle)((c_, f_) => c_.copy(topTitle = f_))
    def fileType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fileType)((c_, f_) => c_.copy(fileType = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def author: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.author)((c_, f_) => c_.copy(author = f_))
    def creator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.creator)((c_, f_) => c_.copy(creator = f_))
    def producer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.producer)((c_, f_) => c_.copy(producer = f_))
    def creationDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.creationDate)((c_, f_) => c_.copy(creationDate = f_))
    def modDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.modDate)((c_, f_) => c_.copy(modDate = f_))
    def pages: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.pages)((c_, f_) => c_.copy(pages = f_))
    def encrypted: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.encrypted)((c_, f_) => c_.copy(encrypted = f_))
    def dim: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.PageDimension] = field(_.getDim)((c_, f_) => c_.copy(dim = Option(f_)))
    def optionalDim: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.github.sguzman.ebook.graph.protoc.items.PageDimension]] = field(_.dim)((c_, f_) => c_.copy(dim = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.size)((c_, f_) => c_.copy(size = f_))
    def md5: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.md5)((c_, f_) => c_.copy(md5 = f_))
  }
  final val TOPTITLE_FIELD_NUMBER = 1
  final val FILETYPE_FIELD_NUMBER = 2
  final val TITLE_FIELD_NUMBER = 3
  final val AUTHOR_FIELD_NUMBER = 4
  final val CREATOR_FIELD_NUMBER = 5
  final val PRODUCER_FIELD_NUMBER = 6
  final val CREATIONDATE_FIELD_NUMBER = 7
  final val MODDATE_FIELD_NUMBER = 8
  final val PAGES_FIELD_NUMBER = 9
  final val ENCRYPTED_FIELD_NUMBER = 10
  final val DIM_FIELD_NUMBER = 11
  final val SIZE_FIELD_NUMBER = 12
  final val MD5_FIELD_NUMBER = 13
}
