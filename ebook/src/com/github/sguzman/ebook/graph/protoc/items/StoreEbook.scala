// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.github.sguzman.ebook.graph.protoc.items

@SerialVersionUID(0L)
final case class StoreEbook(
    book: scala.Option[com.github.sguzman.ebook.graph.protoc.items.Ebook] = None,
    host: scala.Option[com.github.sguzman.ebook.graph.protoc.items.Hosting] = None
    ) extends scalapb.GeneratedMessage with scalapb.Message[StoreEbook] with scalapb.lenses.Updatable[StoreEbook] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (book.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(book.get.serializedSize) + book.get.serializedSize }
      if (host.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(host.get.serializedSize) + host.get.serializedSize }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      book.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      host.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.github.sguzman.ebook.graph.protoc.items.StoreEbook = {
      var __book = this.book
      var __host = this.host
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __book = Option(_root_.scalapb.LiteParser.readMessage(_input__, __book.getOrElse(com.github.sguzman.ebook.graph.protoc.items.Ebook.defaultInstance)))
          case 18 =>
            __host = Option(_root_.scalapb.LiteParser.readMessage(_input__, __host.getOrElse(com.github.sguzman.ebook.graph.protoc.items.Hosting.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.github.sguzman.ebook.graph.protoc.items.StoreEbook(
          book = __book,
          host = __host
      )
    }
    def getBook: com.github.sguzman.ebook.graph.protoc.items.Ebook = book.getOrElse(com.github.sguzman.ebook.graph.protoc.items.Ebook.defaultInstance)
    def clearBook: StoreEbook = copy(book = None)
    def withBook(__v: com.github.sguzman.ebook.graph.protoc.items.Ebook): StoreEbook = copy(book = Option(__v))
    def getHost: com.github.sguzman.ebook.graph.protoc.items.Hosting = host.getOrElse(com.github.sguzman.ebook.graph.protoc.items.Hosting.defaultInstance)
    def clearHost: StoreEbook = copy(host = None)
    def withHost(__v: com.github.sguzman.ebook.graph.protoc.items.Hosting): StoreEbook = copy(host = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => book.orNull
        case 2 => host.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => book.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => host.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.github.sguzman.ebook.graph.protoc.items.StoreEbook
}

object StoreEbook extends scalapb.GeneratedMessageCompanion[com.github.sguzman.ebook.graph.protoc.items.StoreEbook] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.github.sguzman.ebook.graph.protoc.items.StoreEbook] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.github.sguzman.ebook.graph.protoc.items.StoreEbook = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.github.sguzman.ebook.graph.protoc.items.StoreEbook(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.github.sguzman.ebook.graph.protoc.items.Ebook]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.github.sguzman.ebook.graph.protoc.items.Hosting]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.github.sguzman.ebook.graph.protoc.items.StoreEbook] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.github.sguzman.ebook.graph.protoc.items.StoreEbook(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.github.sguzman.ebook.graph.protoc.items.Ebook]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.github.sguzman.ebook.graph.protoc.items.Hosting]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ItemsProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ItemsProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.github.sguzman.ebook.graph.protoc.items.Ebook
      case 2 => __out = com.github.sguzman.ebook.graph.protoc.items.Hosting
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.github.sguzman.ebook.graph.protoc.items.StoreEbook(
  )
  implicit class StoreEbookLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.StoreEbook]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.StoreEbook](_l) {
    def book: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.Ebook] = field(_.getBook)((c_, f_) => c_.copy(book = Option(f_)))
    def optionalBook: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.github.sguzman.ebook.graph.protoc.items.Ebook]] = field(_.book)((c_, f_) => c_.copy(book = f_))
    def host: _root_.scalapb.lenses.Lens[UpperPB, com.github.sguzman.ebook.graph.protoc.items.Hosting] = field(_.getHost)((c_, f_) => c_.copy(host = Option(f_)))
    def optionalHost: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.github.sguzman.ebook.graph.protoc.items.Hosting]] = field(_.host)((c_, f_) => c_.copy(host = f_))
  }
  final val BOOK_FIELD_NUMBER = 1
  final val HOST_FIELD_NUMBER = 2
}
